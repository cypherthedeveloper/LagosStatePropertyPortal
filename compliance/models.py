from django.db import models
from django.utils import timezone
from properties.models import Property
from users.models import User


class ComplianceReport(models.Model):
    """Model for compliance reports generated by government agencies."""
    PENDING = 'pending'
    APPROVED = 'approved'
    REJECTED = 'rejected'
    
    STATUS_CHOICES = [
        (PENDING, 'Pending'),
        (APPROVED, 'Approved'),
        (REJECTED, 'Rejected'),
    ]
    
    title = models.CharField(max_length=255)
    description = models.TextField()
    generated_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='generated_reports')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default=PENDING)
    report_file = models.FileField(upload_to='compliance_reports/', null=True, blank=True)
    
    def __str__(self):
        return self.title


class PropertyCompliance(models.Model):
    """Model for tracking property compliance with government regulations."""
    COMPLIANT = 'compliant'
    NON_COMPLIANT = 'non_compliant'
    PENDING_REVIEW = 'pending_review'
    
    COMPLIANCE_STATUS_CHOICES = [
        (COMPLIANT, 'Compliant'),
        (NON_COMPLIANT, 'Non-Compliant'),
        (PENDING_REVIEW, 'Pending Review'),
    ]
    
    property = models.OneToOneField(Property, on_delete=models.CASCADE, related_name='compliance')
    compliance_status = models.CharField(max_length=20, choices=COMPLIANCE_STATUS_CHOICES, default=PENDING_REVIEW)
    reviewed_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='reviewed_properties')
    reviewed_at = models.DateTimeField(null=True, blank=True)
    notes = models.TextField(blank=True)
    last_inspection_date = models.DateField(null=True, blank=True)
    next_inspection_date = models.DateField(null=True, blank=True)
    
    def __str__(self):
        return f"Compliance for {self.property.title}"
    
    def save(self, *args, **kwargs):
        if self.compliance_status != self._initial_compliance_status and self.compliance_status != self.PENDING_REVIEW:
            self.reviewed_at = timezone.now()
        super().save(*args, **kwargs)
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self._initial_compliance_status = self.compliance_status


class ComplianceRequirement(models.Model):
    """Model for defining compliance requirements that properties must meet."""
    title = models.CharField(max_length=255)
    description = models.TextField()
    is_active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    created_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='created_requirements')
    
    def __str__(self):
        return self.title


class PropertyRequirementCheck(models.Model):
    """Model for checking if a property meets specific compliance requirements."""
    PASSED = 'passed'
    FAILED = 'failed'
    PENDING = 'pending'
    
    CHECK_STATUS_CHOICES = [
        (PASSED, 'Passed'),
        (FAILED, 'Failed'),
        (PENDING, 'Pending'),
    ]
    
    property_compliance = models.ForeignKey(PropertyCompliance, on_delete=models.CASCADE, related_name='requirement_checks')
    requirement = models.ForeignKey(ComplianceRequirement, on_delete=models.CASCADE)
    status = models.CharField(max_length=20, choices=CHECK_STATUS_CHOICES, default=PENDING)
    checked_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    checked_at = models.DateTimeField(null=True, blank=True)
    notes = models.TextField(blank=True)
    
    class Meta:
        unique_together = ('property_compliance', 'requirement')
    
    def __str__(self):
        return f"{self.requirement.title} check for {self.property_compliance.property.title}"
    
    def save(self, *args, **kwargs):
        if self.status != self._initial_status and self.status != self.PENDING:
            self.checked_at = timezone.now()
        super().save(*args, **kwargs)
        
        # Update the overall compliance status based on requirement checks
        property_compliance = self.property_compliance
        all_checks = property_compliance.requirement_checks.all()
        
        if all_checks.filter(status=self.FAILED).exists():
            property_compliance.compliance_status = PropertyCompliance.NON_COMPLIANT
        elif all_checks.filter(status=self.PENDING).exists():
            property_compliance.compliance_status = PropertyCompliance.PENDING_REVIEW
        else:
            property_compliance.compliance_status = PropertyCompliance.COMPLIANT
        
        property_compliance.save()
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self._initial_status = self.status